@using Microsoft.AspNetCore.Components.Forms;

<h1>@Mode Onderdeel</h1>

<hr />
@if (Onderdeel is not null)
{
    <EditForm Model="Onderdeel"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h2>🆔 Identification</h2>
        <p>
            <label>
                SerieNummer:
                <InputText @bind-Value="Onderdeel.SerieNummer" />
                <ConcurrencyField Model="Onderdeel"
                                  DbModel="DbOnderdeel"
                                  Property="obj => obj?.SerieNummer" />
            </label>
            <label>
                Naam Onderdeel:
                <InputText @bind-Value="Onderdeel.Naam" />
                <ConcurrencyField Model="Onderdeel"
                                  DbModel="DbOnderdeel"
                                  Property="obj => obj?.Naam" />
            </label>
            
        </p>
        <p>
            <label>
                Quantity:
                <InputNumber @bind-Value="Onderdeel.Hoeveelheid" />
                <ConcurrencyField Model="Onderdeel"
                                  DbModel="DbOnderdeel"
                                  Property="obj => obj?.Hoeveelheid" />
            </label>
            
        </p>
        <h2>🏠 Adres</h2>
        <p>
            <label>
                Locatie:
                <InputText @bind-Value="Onderdeel.Locatie" />
                <ConcurrencyField Model="Onderdeel"
                                DbModel="DbOnderdeel"
                                Property="obj => obj?.Locatie" />
            </label>
        </p>
        <h2>📒 Additional Information</h2>
        <p>
            <label>
                Soort:
                <InputText @bind-Value="Onderdeel.Soort" />
                <ConcurrencyField Model="Onderdeel"
                                  DbModel="DbOnderdeel"
                                  Property="obj => obj?.Soort" />
            </label>
            <label>
                Comment (optioneel):
                <InputText @bind-Value="Onderdeel.Comment" />
                <ConcurrencyField Model="Onderdeel"
                                  DbModel="DbOnderdeel"
                                  Property="obj => obj?.Comment" />
            </label>
            
        </p>
        <br />
        <button disabled="@Busy" class="btn btn-warning"
                @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit"
                class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Onderdeel to upsert.
    [Parameter]
    public Onderdeel? Onderdeel { get; set; }

    // The database version of Onderdeel if a concurrency issue.
    [Parameter]
    public Onderdeel? DbOnderdeel { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    // Handle form submission request.
    // isValid: True when field validation passed.
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}
