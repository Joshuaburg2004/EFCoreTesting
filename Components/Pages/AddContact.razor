@page "/add"
@rendermode InteractiveServer
@using BlazorWebAppEFCore.Grid
@using Microsoft.AspNetCore.Mvc
@inject IDbContextFactory<OnderdeelContext> DbFactory
@inject NavigationManager Navigation
@inject IPageHelper PageHelper
@inject ILogger<ApiController> logger

@if (Onderdeel is not null)
{
    <OnderdeelForm Busy="Busy" 
                 Onderdeel="Onderdeel" 
                 IsAdd="true"
                 CancelRequest="Cancel"
                 ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}
@if (Success)
{
    <br />
    <div class="alert alert-success">The onderdeel was successfully added.</div>
}
@if (Error)
{
    <br />
    <div class="alert alert-danger">Failed to add the onderdeel (@ErrorMessage).</div>
}

@code {
    private Onderdeel? Onderdeel { get; set; }

    // True when an asynchronous operation is running.
    private bool Busy;

    // True after successful add.
    private bool Success;

    // True when an error occurred.
    private bool Error;

    private string ErrorMessage = string.Empty;

    // Start with fresh Onderdeel.
    protected override Task OnInitializedAsync()
    {
        Onderdeel = new();
        return base.OnInitializedAsync();
    }

    // Respond to a forms submission.
    // success is True when valid.
    private async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            Success = false;
            Error = false;
            return;
        }

        Busy = true;

        using var context = DbFactory.CreateDbContext();

        // This just attaches.
        if (Onderdeel is not null)
        {
            ApiController api = new ApiController(logger);
            await api.PostOnderdelen(Onderdeel);
        }

        try
        {
            await context.SaveChangesAsync();
            Success = true;
            Error = false;
            // Ready for the next.
            Onderdeel = new();
            Busy = false;
        }
        catch (Exception ex)
        {
            Success = false;
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
    }

    // Back to list.
    private void Cancel()
    {
        Navigation.NavigateTo($"/Onderdelen/{PageHelper.Page}");
    }
}
